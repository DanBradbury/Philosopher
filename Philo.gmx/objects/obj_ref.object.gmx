<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>init_game(2);

global._phase = "INIT";
global._valid_play = 0;

trans_phases[0] = "LEAD";
trans_phases[1] = "QUICKSILVER";
trans_phases[2] = "TIN";
trans_phases[3] = "BRONZE";
trans_phases[4] = "COPPER";
trans_phases[5] = "SILVER";
trans_phases[6] = "GOLD";
trans_phases[7] = "WINNER";

trans_sequence[0,0] = 3;
trans_sequence[0,1] = "I";
trans_sequence[0,2] = "MAGNESIUM";
trans_sequence[0,3] = "WATER";

trans_sequence[1,0] = 3;
trans_sequence[1,1] = "T";
trans_sequence[1,2] = "ZINC";
trans_sequence[1,3] = "EARTH";

trans_sequence[2,0] = 4;
trans_sequence[2,1] = "D";
trans_sequence[2,2] = "ARSENIC";
trans_sequence[2,3] = "SULFUR";
trans_sequence[2,4] = "AIR";

trans_sequence[3,0] = 4;
trans_sequence[3,1] = "I";
trans_sequence[3,2] = "ZINC";
trans_sequence[3,3] = "WATER";
trans_sequence[3,4] = "FIRE";

trans_sequence[4,0] = 5;
trans_sequence[4,1] = "T";
trans_sequence[4,2] = "MAGNESIUM";
trans_sequence[4,3] = "ARSENIC";
trans_sequence[4,4] = "AIR";
trans_sequence[4,5] = "EARTH";

trans_sequence[5,0] = 6;
trans_sequence[5,1] = "D";
trans_sequence[5,2] = "FIRE";
trans_sequence[5,3] = "WATER";
trans_sequence[5,4] = "AIR";
trans_sequence[5,5] = "EARTH";
trans_sequence[5,6] = "PHILO";

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global._phase == "FORMULATION"){
    if(obj_player1._play_formulation==false){
        global._phase = "TRANSMUTATION";
    }
    if(obj_player1.elements_played == 1 &amp;&amp; obj_player1.process_played == 1){
        global._valid_play = 1;
    }else if(obj_player1.elements_played == 4 &amp;&amp; obj_player1.process_played == 1){
        global._valid_play = 1;
    }else{
        global._valid_play = 0;
    }
}else if(global._phase == "TRANSMUTATION"){
    // TODO: ADD TRANSUMATION RULES
    cur = global.p1_transLevel;
    size = trans_sequence[cur,0];
    
    valid = false;
    if(obj_player1.cards_played == size){
        valid = true;
        active_card = "TRANSMUTE";
        for(i=0;i&lt;size;i++){
            if(obj_player1.played[i] != trans_sequence[cur,(i+1)]){
                valid = false;
            }
        }
    }
    
    if(valid == true){
        global._valid_play = 1;
    }else{
        global._valid_play = 0;
    }

}else if(global._phase == "return cards"){
    global._phase = global._active_phase;
}else if(global._phase == "DISCARD"){
    // perform discard check
    if(obj_player1.hand_size &lt;= 7){
        global._phase = "DRAW";
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw indicator process card
size = trans_sequence[global.p1_transLevel,0];
cur = global.p1_transLevel;


for(i=1;i&lt;=size;i++){

    j = (i-1) % 3;
    
    factor = j*93.5;
    if(i&lt;=3){
        yfactor = 0;
    }else{
        yfactor = 120;
    }
         if(trans_sequence[cur,i] =="ARSENIC"){
                draw_sprite_ext(sprite7_ArsenicF,0,view_xview[view_current]+1025+factor,y+480+yfactor,0.1, 0.1, 0, c_white, 0.5);
            }else if(trans_sequence[cur,i] =="SULFUR"){
                draw_sprite_ext(sprite24_Sulfur,0,view_xview[view_current]+1025+factor,y+480+yfactor,0.1, 0.1, 0, c_white, 0.5);    
            }else if(trans_sequence[cur,i] =="MAGNESIUM"){
                draw_sprite_ext(sprite15_Magnesium,0,view_xview[view_current]+1025+factor,y+480+yfactor,0.1, 0.1, 0, c_white, 0.5);    
            }else if(trans_sequence[cur,i] =="ZINC"){
                draw_sprite_ext(sprite29_Zinc,0,view_xview[view_current]+1025+factor,y+480+yfactor,0.1, 0.1, 0, c_white, 0.5);    
            }else if(trans_sequence[cur,i] =="AIR"){
                draw_sprite_ext(sprite1_Air,0,view_xview[view_current]+1025+factor,y+480+yfactor,0.1, 0.1, 0, c_white, 0.5);    
            }else if(trans_sequence[cur,i] =="EARTH"){
                draw_sprite_ext(sprite10_earth,0,view_xview[view_current]+1025+factor,y+480+yfactor,0.1, 0.1, 0, c_white, 0.5);    
            }else if(trans_sequence[cur,i] =="FIRE"){
                draw_sprite_ext(sprite2_Alchemy_fire_final,0,view_xview[view_current]+1025+factor,y+480+yfactor,0.1, 0.1, 0, c_white, 0.5);    
            }else if(trans_sequence[cur,i] =="WATER"){
                draw_sprite_ext(sprite27_Water,0,view_xview[view_current]+1025+factor,y+480+yfactor,0.1, 0.1, 0, c_white, 0.5);    
            }else if(trans_sequence[cur,i] =="PHILO"){
                draw_sprite_ext(sprite19_PhilosophersStone,0,view_xview[view_current]+1025+factor,y+480+yfactor,0.1, 0.1, 0, c_white, 0.5);    
            }else if(trans_sequence[cur,i] =="I"){
                draw_sprite_ext(sprite12_Incineration,0,view_xview[view_current]+1025+factor,y+480+yfactor,0.1, 0.1, 0, c_white, 0.5);    
            }else if(trans_sequence[cur,i] =="D"){
                draw_sprite_ext(sprite9_Distillation,0,view_xview[view_current]+1025+factor,y+480+yfactor,0.1, 0.1, 0, c_white, 0.5);    
            }else if(trans_sequence[cur,i] =="T"){
                draw_sprite_ext(sprite26_transformation,0,view_xview[view_current]+1025+factor,y+480+yfactor,0.1, 0.1, 0, c_white, 0.5);    
            }
}

draw_set_font(transFont);
draw_set_color(c_white);
draw_text(room_width/2+200,0,trans_phases[cur]+"-&gt; "+trans_phases[cur+1] );
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
